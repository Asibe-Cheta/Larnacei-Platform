generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  emailVerified DateTime?
  phone         String?     @unique
  phoneVerified Boolean     @default(false)
  name          String?
  image         String?
  password      String? // For credentials authentication
  role          UserRole    @default(SEEKER)
  accountType   AccountType @default(INDIVIDUAL)

  // Verification Status
  isVerified        Boolean           @default(false)
  verificationLevel VerificationLevel @default(NONE)
  kycStatus         KYCStatus         @default(PENDING)

  // Payment Integration
  paystackCustomerId String?
  paystackAccountId  String?

  // Profile Information
  bio            String?
  location       String?
  experience     Int? // Years of experience
  specialization String[] // Areas of expertise
  socialLinks    Json? // Social media links

  // Contact Preferences
  contactPreference ContactPreference @default(EMAIL)
  availabilityHours Json?

  // Password Reset
  resetToken        String?
  resetTokenExpiry  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts                 Account[]
  sessions                 Session[]
  properties               Property[]
  bookings                 Booking[]
  reviews                  Review[]
  messages                 Message[]
  notifications            Notification[]
  inquiries                PropertyInquiry[]
  verificationDocs         VerificationDocument[]
  favorites                PropertyFavorite[]
  conversationParticipants ConversationParticipant[]
  payments                 Payment[]
  subscriptions            UserSubscription[]
  payouts                  Payout[]

  @@map("users")
}

model Property {
  id          String @id @default(cuid())
  title       String
  description String

  // Property Classification
  type     PropertyType
  category PropertyCategory
  purpose  PropertyPurpose

  // Location
  location      String
  state         String
  city          String
  lga           String // Local Government Area
  streetAddress String
  landmark      String?
  latitude      Float?
  longitude     Float?

  // Pricing
  price        BigInt // Base price in kobo
  currency     Currency @default(NGN)
  isNegotiable Boolean  @default(false)

  // Property Details
  bedrooms       Int?
  bathrooms      Int?
  toilets        Int?
  sizeInSqm      Float?
  sizeInHectares Float?
  parkingSpaces  Int?   @default(0)
  yearBuilt      Int?
  floorLevel     Int?
  totalFloors    Int?

  // Features & Condition
  features         String[] // JSON array of features
  furnishingStatus FurnishingStatus?
  condition        PropertyCondition

  // Availability
  availabilityStatus AvailabilityStatus @default(AVAILABLE)
  availableFrom      DateTime?
  inspectionType     InspectionType     @default(BY_APPOINTMENT)

  // Legal Documentation
  titleDocuments Json // Document checklist
  ownershipType  OwnershipType
  legalStatus    LegalStatus   @default(CLEAR)

  // Media
  images         PropertyImage[]
  videos         PropertyVideo[]
  virtualTourUrl String?
  floorPlanUrl   String?

  // Status & Verification
  isActive         Boolean          @default(false)
  isVerified       Boolean          @default(false)
  isFeatured       Boolean          @default(false)
  moderationStatus ModerationStatus @default(PENDING)

  // Analytics
  viewCount     Int @default(0)
  inquiryCount  Int @default(0)
  favoriteCount Int @default(0)

  // Relations
  ownerId       String
  owner         User               @relation(fields: [ownerId], references: [id])
  bookings      Booking[]
  reviews       Review[]
  availability  Availability[]
  inquiries     PropertyInquiry[]
  favorites     PropertyFavorite[]
  conversations Conversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  order      Int      @default(0)
  isPrimary  Boolean  @default(false)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("property_images")
}

model PropertyVideo {
  id         String    @id @default(cuid())
  url        String
  title      String?
  type       VideoType @default(WALKTHROUGH)
  propertyId String
  property   Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("property_videos")
}

model PropertyInquiry {
  id                String            @id @default(cuid())
  message           String
  inquiryType       InquiryType
  contactPreference ContactPreference

  // Inquiry Details
  intendedUse     String?
  budget          Int?
  timeframe       String?
  financingNeeded Boolean @default(false)

  // Enhanced fields for better inquiry management
  inquirerName           String? // For non-registered users
  inquirerEmail          String? // For non-registered users  
  inquirerPhone          String? // For non-registered users
  preferredContactMethod String? // WhatsApp, Phone, Email, SMS
  requestViewing         Boolean   @default(false)
  viewingDate            DateTime?
  viewingTime            String?
  virtualViewingInterest Boolean   @default(false)

  status InquiryStatus @default(NEW)

  // Relations
  propertyId     String
  property       Property      @relation(fields: [propertyId], references: [id])
  inquirerId     String?
  inquirer       User?         @relation(fields: [inquirerId], references: [id])
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_inquiries")
}

model Booking {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  guestId    String
  guest      User     @relation(fields: [guestId], references: [id])

  // Booking Details
  checkIn        DateTime @db.Date
  checkOut       DateTime @db.Date
  totalNights    Int
  numberOfGuests Int
  adults         Int
  children       Int      @default(0)

  // Pricing Breakdown
  basePrice       Int // Nightly rate Ã— nights (in kobo)
  cleaningFee     Int      @default(0)
  serviceFee      Int      @default(0)
  securityDeposit Int      @default(0)
  taxes           Int      @default(0)
  discounts       Int      @default(0)
  totalAmount     Int // Final amount (in kobo)
  currency        Currency @default(NGN)

  // Booking Status
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Payment Information
  paymentIntentId String? // Paystack payment reference
  paidAt          DateTime?
  refundAmount    Int       @default(0)
  refundedAt      DateTime?

  // Additional Information
  specialRequests    String?
  guestNotes         String?
  hostNotes          String?
  cancellationReason String?
  cancelledAt        DateTime?
  cancelledBy        String? // User ID who cancelled

  // Relations
  payments Payment[]
  reviews  Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Review {
  id      String  @id @default(cuid())
  rating  Int // 1-5 stars
  comment String?

  // Relations
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  bookingId  String?
  booking    Booking? @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())

  @@map("reviews")
}

model Message {
  id          String      @id @default(cuid())
  content     String
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  readAt      DateTime?

  // Relations
  senderId       String
  sender         User                @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation        @relation(fields: [conversationId], references: [id])
  attachments    MessageAttachment[]

  createdAt DateTime @default(now())

  @@map("messages")
}

model Conversation {
  id         String             @id @default(cuid())
  propertyId String
  property   Property           @relation(fields: [propertyId], references: [id])
  status     ConversationStatus @default(ACTIVE)

  // Relations
  participants ConversationParticipant[]
  messages     Message[]
  inquiries    PropertyInquiry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  conversation   Conversation    @relation(fields: [conversationId], references: [id])
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  role           ParticipantRole @default(PARTICIPANT)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String
  message    Message  @relation(fields: [messageId], references: [id])
  fileName   String
  fileUrl    String
  fileType   String
  fileSize   Int
  uploadedAt DateTime @default(now())

  @@map("message_attachments")
}

model Notification {
  id      String           @id @default(cuid())
  title   String
  message String
  type    NotificationType
  isRead  Boolean          @default(false)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("notifications")
}

model Availability {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  date        DateTime @db.Date
  isAvailable Boolean  @default(true)
  customPrice Int? // Override default nightly rate
  minimumStay Int? // Minimum nights for this date
  notes       String? // Special conditions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([propertyId, date])
  @@map("availability")
}

model VerificationDocument {
  id             String       @id @default(cuid())
  documentType   DocumentType
  documentUrl    String
  documentNumber String?

  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  rejectionReason    String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification_documents")
}

model PropertyFavorite {
  id String @id @default(cuid())

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, propertyId])
  @@map("property_favorites")
}

// Enums
enum UserRole {
  SEEKER
  OWNER
  AGENT
  ADMIN
  SUPER_ADMIN
}

enum AccountType {
  INDIVIDUAL
  AGENT
  AGENCY
  CORPORATE
}

enum VerificationLevel {
  NONE
  EMAIL_VERIFIED
  PHONE_VERIFIED
  ID_VERIFIED
  BUSINESS_VERIFIED
  FULL_VERIFIED
}

enum KYCStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  INCOMPLETE
}

enum PropertyCategory {
  SHORT_STAY
  LONG_TERM_RENTAL
  LANDED_PROPERTY
  PROPERTY_SALE
}

enum PropertyType {
  APARTMENT
  HOUSE
  LAND
  COMMERCIAL
  VILLA
  DUPLEX
  STUDIO
  PENTHOUSE
}

enum PropertyPurpose {
  FOR_SALE
  FOR_RENT
  FOR_LEASE
  SHORT_STAY
}

enum PropertyCondition {
  NEW
  OLD
  RENOVATED
  UNDER_CONSTRUCTION
  NEEDS_RENOVATION
}

enum FurnishingStatus {
  FURNISHED
  SEMI_FURNISHED
  UNFURNISHED
}

enum Currency {
  NGN
  USD
  GBP
  EUR
}

enum AvailabilityStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum InspectionType {
  ANYTIME
  BY_APPOINTMENT
  VIRTUAL_ONLY
  WEEKENDS_ONLY
  WEEKDAYS_ONLY
}

enum OwnershipType {
  PERSONAL
  FAMILY
  AGENCY
  CORPORATE
  GOVERNMENT
}

enum LegalStatus {
  CLEAR
  PENDING
  DISPUTED
  UNKNOWN
}

enum ContactPreference {
  EMAIL
  PHONE
  WHATSAPP
  PLATFORM_MESSAGE
}

enum InquiryType {
  GENERAL_INFO
  VIEWING_REQUEST
  PRICE_INQUIRY
  PURCHASE_INTENT
  RENTAL_APPLICATION
  INVESTMENT_INQUIRY
  OTHER
}

enum InquiryStatus {
  NEW
  RESPONDED
  IN_PROGRESS
  CLOSED
  SPAM
}

enum DocumentType {
  NIN
  BVN
  DRIVERS_LICENSE
  VOTERS_CARD
  PASSPORT
  CAC_CERTIFICATE
  BUSINESS_LICENSE
  REAN_MEMBERSHIP
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
  UNDER_REVIEW
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  REFUNDED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum NotificationType {
  BOOKING_REQUEST
  BOOKING_CONFIRMED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
  MESSAGE_RECEIVED
  PROPERTY_APPROVED
  PROPERTY_REJECTED
  VERIFICATION_COMPLETE
}

enum VideoType {
  WALKTHROUGH
  DRONE
  NEIGHBORHOOD
  VIRTUAL_TOUR
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  SYSTEM
}

enum ConversationStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ParticipantRole {
  PARTICIPANT
  ADMIN
  MODERATOR
}

// New Payment System Models
model Payment {
  id String @id @default(cuid())

  // Payment Details
  amount        BigInt // Amount in kobo
  currency      Currency      @default(NGN)
  paymentMethod PaymentMethod
  paymentType   PaymentType

  // Paystack Integration
  paystackReference         String? @unique
  paystackAuthorizationCode String?
  paystackChannel           String? // card, bank, ussd, etc.
  paystackFees              Int     @default(0)

  // Payment Status
  status          PaymentStatus @default(PENDING)
  gatewayResponse String?
  paidAt          DateTime?

  // Refund Information
  refundAmount BigInt    @default(0)
  refundedAt   DateTime?
  refundReason String?

  // Relations
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  // Premium Features
  premiumFeatureId String?
  premiumFeature   PremiumFeature? @relation(fields: [premiumFeatureId], references: [id])

  // Subscriptions
  subscriptions UserSubscription[] @relation("SubscriptionPayment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

model PremiumFeature {
  id          String   @id @default(cuid())
  name        String
  description String
  price       BigInt // Price in kobo
  currency    Currency @default(NGN)
  duration    Int? // Duration in days (null for one-time)
  isActive    Boolean  @default(true)

  // Feature Type
  featureType PremiumFeatureType

  // Relations
  payments Payment[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserSubscription UserSubscription[]

  @@map("premium_features")
}

model UserSubscription {
  id               String         @id @default(cuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  premiumFeatureId String
  premiumFeature   PremiumFeature @relation(fields: [premiumFeatureId], references: [id])

  // Subscription Details
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  autoRenew Boolean   @default(false)

  // Payment Tracking
  lastPaymentId String?
  lastPayment   Payment? @relation("SubscriptionPayment", fields: [lastPaymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_subscriptions")
}

model Payout {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Payout Details
  amount        BigInt // Amount in kobo
  currency      Currency @default(NGN)
  bankCode      String
  accountNumber String
  accountName   String

  // Status
  status               PayoutStatus @default(PENDING)
  paystackTransferCode String?
  failureReason        String?

  // Processing
  processedAt DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payouts")
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  USSD
  MOBILE_MONEY
  WALLET
}

enum PaymentType {
  BOOKING_PAYMENT
  SECURITY_DEPOSIT
  CLEANING_FEE
  SERVICE_FEE
  PREMIUM_FEATURE
  SUBSCRIPTION
  REFUND
}

enum PremiumFeatureType {
  PREMIUM_LISTING
  FEATURED_LISTING
  TOP_PLACEMENT
  PRIORITY_SUPPORT
  ANALYTICS_DASHBOARD
  MULTIPLE_PROPERTY_MANAGEMENT
  CUSTOM_BRANDING
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
